#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(object):
    """
    WorldpayWithin Callback Service - RPC clients implement this service to enable callbacks from WorldpayWithin Service
    """
    def beginServiceDelivery(self, serviceID, serviceDeliveryToken, unitsToSupply):
        """
        Parameters:
         - serviceID
         - serviceDeliveryToken
         - unitsToSupply
        """
        pass

    def endServiceDelivery(self, serviceID, serviceDeliveryToken, unitsReceived):
        """
        Parameters:
         - serviceID
         - serviceDeliveryToken
         - unitsReceived
        """
        pass


class Client(Iface):
    """
    WorldpayWithin Callback Service - RPC clients implement this service to enable callbacks from WorldpayWithin Service
    """
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def beginServiceDelivery(self, serviceID, serviceDeliveryToken, unitsToSupply):
        """
        Parameters:
         - serviceID
         - serviceDeliveryToken
         - unitsToSupply
        """
        self.send_beginServiceDelivery(serviceID, serviceDeliveryToken, unitsToSupply)
        self.recv_beginServiceDelivery()

    def send_beginServiceDelivery(self, serviceID, serviceDeliveryToken, unitsToSupply):
        self._oprot.writeMessageBegin('beginServiceDelivery', TMessageType.CALL, self._seqid)
        args = beginServiceDelivery_args()
        args.serviceID = serviceID
        args.serviceDeliveryToken = serviceDeliveryToken
        args.unitsToSupply = unitsToSupply
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_beginServiceDelivery(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = beginServiceDelivery_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.err is not None:
            raise result.err
        return

    def endServiceDelivery(self, serviceID, serviceDeliveryToken, unitsReceived):
        """
        Parameters:
         - serviceID
         - serviceDeliveryToken
         - unitsReceived
        """
        self.send_endServiceDelivery(serviceID, serviceDeliveryToken, unitsReceived)
        self.recv_endServiceDelivery()

    def send_endServiceDelivery(self, serviceID, serviceDeliveryToken, unitsReceived):
        self._oprot.writeMessageBegin('endServiceDelivery', TMessageType.CALL, self._seqid)
        args = endServiceDelivery_args()
        args.serviceID = serviceID
        args.serviceDeliveryToken = serviceDeliveryToken
        args.unitsReceived = unitsReceived
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_endServiceDelivery(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = endServiceDelivery_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.err is not None:
            raise result.err
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["beginServiceDelivery"] = Processor.process_beginServiceDelivery
        self._processMap["endServiceDelivery"] = Processor.process_endServiceDelivery

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_beginServiceDelivery(self, seqid, iprot, oprot):
        args = beginServiceDelivery_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = beginServiceDelivery_result()
        try:
            self._handler.beginServiceDelivery(args.serviceID, args.serviceDeliveryToken, args.unitsToSupply)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("beginServiceDelivery", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_endServiceDelivery(self, seqid, iprot, oprot):
        args = endServiceDelivery_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = endServiceDelivery_result()
        try:
            self._handler.endServiceDelivery(args.serviceID, args.serviceDeliveryToken, args.unitsReceived)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except wpthrift_types.ttypes.Error as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("endServiceDelivery", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class beginServiceDelivery_args(object):
    """
    Attributes:
     - serviceID
     - serviceDeliveryToken
     - unitsToSupply
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'serviceID', None, None, ),  # 1
        (2, TType.STRUCT, 'serviceDeliveryToken', (wpthrift_types.ttypes.ServiceDeliveryToken, wpthrift_types.ttypes.ServiceDeliveryToken.thrift_spec), None, ),  # 2
        (3, TType.I32, 'unitsToSupply', None, None, ),  # 3
    )

    def __init__(self, serviceID=None, serviceDeliveryToken=None, unitsToSupply=None,):
        self.serviceID = serviceID
        self.serviceDeliveryToken = serviceDeliveryToken
        self.unitsToSupply = unitsToSupply

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.serviceID = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.serviceDeliveryToken = wpthrift_types.ttypes.ServiceDeliveryToken()
                    self.serviceDeliveryToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.unitsToSupply = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('beginServiceDelivery_args')
        if self.serviceID is not None:
            oprot.writeFieldBegin('serviceID', TType.I32, 1)
            oprot.writeI32(self.serviceID)
            oprot.writeFieldEnd()
        if self.serviceDeliveryToken is not None:
            oprot.writeFieldBegin('serviceDeliveryToken', TType.STRUCT, 2)
            self.serviceDeliveryToken.write(oprot)
            oprot.writeFieldEnd()
        if self.unitsToSupply is not None:
            oprot.writeFieldBegin('unitsToSupply', TType.I32, 3)
            oprot.writeI32(self.unitsToSupply)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class beginServiceDelivery_result(object):
    """
    Attributes:
     - err
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, err=None,):
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('beginServiceDelivery_result')
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class endServiceDelivery_args(object):
    """
    Attributes:
     - serviceID
     - serviceDeliveryToken
     - unitsReceived
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'serviceID', None, None, ),  # 1
        (2, TType.STRUCT, 'serviceDeliveryToken', (wpthrift_types.ttypes.ServiceDeliveryToken, wpthrift_types.ttypes.ServiceDeliveryToken.thrift_spec), None, ),  # 2
        (3, TType.I32, 'unitsReceived', None, None, ),  # 3
    )

    def __init__(self, serviceID=None, serviceDeliveryToken=None, unitsReceived=None,):
        self.serviceID = serviceID
        self.serviceDeliveryToken = serviceDeliveryToken
        self.unitsReceived = unitsReceived

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.serviceID = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.serviceDeliveryToken = wpthrift_types.ttypes.ServiceDeliveryToken()
                    self.serviceDeliveryToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.unitsReceived = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('endServiceDelivery_args')
        if self.serviceID is not None:
            oprot.writeFieldBegin('serviceID', TType.I32, 1)
            oprot.writeI32(self.serviceID)
            oprot.writeFieldEnd()
        if self.serviceDeliveryToken is not None:
            oprot.writeFieldBegin('serviceDeliveryToken', TType.STRUCT, 2)
            self.serviceDeliveryToken.write(oprot)
            oprot.writeFieldEnd()
        if self.unitsReceived is not None:
            oprot.writeFieldBegin('unitsReceived', TType.I32, 3)
            oprot.writeI32(self.unitsReceived)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class endServiceDelivery_result(object):
    """
    Attributes:
     - err
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'err', (wpthrift_types.ttypes.Error, wpthrift_types.ttypes.Error.thrift_spec), None, ),  # 1
    )

    def __init__(self, err=None,):
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.err = wpthrift_types.ttypes.Error()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('endServiceDelivery_result')
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
